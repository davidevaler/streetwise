<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard - Streetwise</title>
  <link rel="stylesheet" href="/css/admin.css">
  <link rel="stylesheet" href="/css/style.css">
  <link rel="apple-touch-icon" sizes="180x180" href="/img/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/img/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/img/favicon-16x16.png">
  <link rel="manifest" href="/img/site.webmanifest">
</head>
<body>
  <div class="admin-container">
    <div class="admin-header">
      <h1>Dashboard Admin</h1>
      <p>Benvenuto nella sezione amministrativa di Streetwise</p>
    </div>
    
    <div class="user-info">
      <h2>üìß Informazioni Utente</h2>
      <p><strong>Email:</strong> <span id="user-email">Caricamento...</span></p>
      <p><strong>Ruolo:</strong> <span id="user-role">Caricamento...</span></p>
      <p><strong>ID:</strong> <span id="user-id">Caricamento...</span></p>
    </div>
    
    <div class="admin-stats">
      <div class="stat-card">
        <h3>üë• Utenti Totali</h3>
        <div class="stat-value" id="total-users">-</div>
        <p>Utenti Registrati</p>
      </div>
      
      <div class="stat-card">
        <h3>üõ°Ô∏è Amministratori</h3>
        <div class="stat-value" id="total-admins">-</div>
        <p>Admin Attivi</p>
      </div>
      
      <div class="stat-card">
        <h3>üë§ Delegati</h3>
        <div class="stat-value" id="total-delegati">-</div>
        <p>Utenti Delegati</p>
      </div>
    </div>
    
    <div class="users-section">
      <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
        <h2>üë• Gestione Utenti</h2>
        <button class="btn btn-success" onclick="openAddUserModal()">‚ûï Aggiungi Utente</button>
      </div>
      
      <div id="users-loading" class="loading">
        Caricamento utenti...
      </div>
      
      <div id="users-content" style="display: none;">
        <table class="users-table">
          <thead>
            <tr>
              <th>Email</th>
              <th>Ruolo</th>
              <th>ID</th>
              <th>Azioni</th>
            </tr>
          </thead>
          <tbody id="users-tbody">
            <!-- Gli utenti verranno inseriti qui dinamicamente -->
          </tbody>
        </table>
      </div>
    </div>
    
    <div style="text-align: center; margin-top: 30px;">
      <a href="/" class="btn btn-secondary">‚Üê Torna alla Mappa</a>
      <button class="btn btn-danger" onclick="logout()">üö™ Logout</button>
    </div>
  </div>

  <!-- Modal per aggiungere/modificare utente -->
  <div id="userModal" class="modal">
    <div class="modal-content">
      <h3 id="modal-title">Aggiungi Nuovo Utente</h3>
      <form id="userForm">
        <div class="form-group">
          <label for="modal-email">Email:</label>
          <input type="email" id="modal-email" required>
        </div>
        <div class="form-group">
          <label for="modal-password">Password:</label>
          <input type="password" id="modal-password" minlength="8">
          <small style="color: #666;">Minimo 8 caratteri. Lascia vuoto per non modificare (solo in modifica)</small>
        </div>
        <div class="form-group">
          <label for="modal-role">Ruolo:</label>
          <select id="modal-role">
            <option value="delegato">Delegato</option>
            <option value="admin">Admin</option>
          </select>
        </div>
        <div class="form-actions">
          <button type="button" class="btn btn-secondary" onclick="closeUserModal()">Annulla</button>
          <button type="submit" class="btn btn-primary" id="modal-submit">Salva</button>
        </div>
      </form>
    </div>
  </div>

  <script src="/js/config.js"></script>
  <script>
    let currentEditingUserId = null;
    let allUsers = [];

    document.addEventListener('DOMContentLoaded', async () => {
      // Controlla se l'utente √® loggato e √® admin
      const token = localStorage.getItem('token');
      const user = JSON.parse(localStorage.getItem('user') || '{}');
      
      if (!token || user.role !== 'admin') {
        alert('Accesso negato. Solo gli admin possono accedere a questa pagina.');
        window.location.href = '/';
        return;
      }
      
      // Mostra informazioni utente
      document.getElementById('user-email').textContent = user.email;
      document.getElementById('user-role').textContent = user.role;
      document.getElementById('user-id').textContent = user.id;
      
      // Carica gli utenti
      await loadUsers();
      
      // Setup form submit
      document.getElementById('userForm').addEventListener('submit', handleUserSubmit);
    });
    
    async function loadUsers() {
      const token = localStorage.getItem('token');
      
      try {
        const response = await fetch(`${SERVER_URL}/api/users`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        if (!response.ok) {
          throw new Error('Errore nel caricamento utenti');
        }
        
        allUsers = await response.json();
        displayUsers(allUsers);
        updateStats();
        
      } catch (error) {
        console.error('Errore nel caricamento utenti:', error);
        document.getElementById('users-loading').innerHTML = 'Errore nel caricamento utenti';
      }
    }
    
    function displayUsers(users) {
      const tbody = document.getElementById('users-tbody');
      tbody.innerHTML = '';
      
      users.forEach(user => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${user.email}</td>
          <td><span class="role-badge role-${user.role}">${user.role}</span></td>
          <td>${user._id}</td>
          <td>
            <button class="btn btn-warning" onclick="editUser('${user._id}')">‚úèÔ∏è Modifica</button>
            <button class="btn btn-danger" onclick="deleteUser('${user._id}', '${user.email}')">üóëÔ∏è Elimina</button>
          </td>
        `;
        tbody.appendChild(row);
      });
      
      document.getElementById('users-loading').style.display = 'none';
      document.getElementById('users-content').style.display = 'block';
    }
    
    function updateStats() {
      const totalUsers = allUsers.length;
      const totalAdmins = allUsers.filter(u => u.role === 'admin').length;
      const totalDelegati = allUsers.filter(u => u.role === 'delegato').length;
      
      document.getElementById('total-users').textContent = totalUsers;
      document.getElementById('total-admins').textContent = totalAdmins;
      document.getElementById('total-delegati').textContent = totalDelegati;
    }
    
    function openAddUserModal() {
      currentEditingUserId = null;
      document.getElementById('modal-title').textContent = 'Aggiungi Nuovo Utente';
      document.getElementById('modal-submit').textContent = 'Aggiungi';
      document.getElementById('userForm').reset();
      document.getElementById('modal-password').required = true;
      document.getElementById('userModal').style.display = 'block';
    }
    
    function editUser(userId) {
      const user = allUsers.find(u => u._id === userId);
      if (!user) return;
      
      currentEditingUserId = userId;
      document.getElementById('modal-title').textContent = 'Modifica Utente';
      document.getElementById('modal-submit').textContent = 'Salva Modifiche';
      document.getElementById('modal-email').value = user.email;
      document.getElementById('modal-password').value = '';
      document.getElementById('modal-password').required = false;
      document.getElementById('modal-role').value = user.role;
      document.getElementById('userModal').style.display = 'block';
    }
    
    function closeUserModal() {
      document.getElementById('userModal').style.display = 'none';
      currentEditingUserId = null;
    }
    
    async function handleUserSubmit(e) {
      e.preventDefault();
      
      const email = document.getElementById('modal-email').value;
      const password = document.getElementById('modal-password').value;
      const role = document.getElementById('modal-role').value;
      
      const token = localStorage.getItem('token');
      
      try {
        let response;
        const userData = { email, role };
        
        if (password) {
          userData.password = password;
        }
        
        if (currentEditingUserId) {
          // Modifica utente esistente
          response = await fetch(`${SERVER_URL}/api/users/${currentEditingUserId}`, {
            method: 'PUT',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(userData)
          });
        } else {
          // Crea nuovo utente
          if (!password) {
            alert('La password √® obbligatoria per i nuovi utenti');
            return;
          }
          response = await fetch(`${SERVER_URL}/api/users`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(userData)
          });
        }
        
        const result = await response.json();
        
        if (!response.ok) {
          alert(result.message || 'Errore nell\'operazione');
          return;
        }
        
        alert(currentEditingUserId ? 'Utente modificato con successo!' : 'Utente creato con successo!');
        closeUserModal();
        await loadUsers();
        
      } catch (error) {
        console.error('Errore nell\'operazione:', error);
        alert('Errore di rete');
      }
    }
    
    async function deleteUser(userId, email) {
      if (!confirm(`Sei sicuro di voler eliminare l'utente ${email}?`)) {
        return;
      }
      
      const token = localStorage.getItem('token');
      
      try {
        const response = await fetch(`${SERVER_URL}/api/users/${userId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        const result = await response.json();
        
        if (!response.ok) {
          alert(result.message || 'Errore nell\'eliminazione');
          return;
        }
        
        alert('Utente eliminato con successo!');
        await loadUsers();
        
      } catch (error) {
        console.error('Errore nell\'eliminazione:', error);
        alert('Errore di rete');
      }
    }
    
    function logout() {
      if (confirm('Sei sicuro di voler effettuare il logout?')) {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        window.location.href = '/';
      }
    }
    
    // Chiudi modal cliccando fuori
    window.onclick = function(event) {
      const modal = document.getElementById('userModal');
      if (event.target === modal) {
        closeUserModal();
      }
    }
  </script>
</body>
</html>
